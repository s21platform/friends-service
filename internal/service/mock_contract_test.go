// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// GetPeerFollows mocks base method.
func (m *MockDbRepo) GetPeerFollows(initiator string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerFollows", initiator)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerFollows indicates an expected call of GetPeerFollows.
func (mr *MockDbRepoMockRecorder) GetPeerFollows(initiator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerFollows", reflect.TypeOf((*MockDbRepo)(nil).GetPeerFollows), initiator)
}

// GetWhoFollowsPeer mocks base method.
func (m *MockDbRepo) GetWhoFollowsPeer(initiator string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhoFollowsPeer", initiator)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhoFollowsPeer indicates an expected call of GetWhoFollowsPeer.
func (mr *MockDbRepoMockRecorder) GetWhoFollowsPeer(initiator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhoFollowsPeer", reflect.TypeOf((*MockDbRepo)(nil).GetWhoFollowsPeer), initiator)
}

// SetFriend mocks base method.
func (m *MockDbRepo) SetFriend(peer_1, peer_2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFriend", peer_1, peer_2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFriend indicates an expected call of SetFriend.
func (mr *MockDbRepoMockRecorder) SetFriend(peer_1, peer_2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFriend", reflect.TypeOf((*MockDbRepo)(nil).SetFriend), peer_1, peer_2)
}
